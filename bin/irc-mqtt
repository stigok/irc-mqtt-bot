#!/usr/bin/env node

const MQTT = require('mqtt')
const IRC = require('irc-upd')
const logger = require('winston')

const ircserver = process.env.IRC_SERVER || 'chat.freenode.net'
const botName = process.env.BOTNAME || 'sshowbot'
const homechan = process.env.HOMECHAN || '#hackeriet'
const mqttServerUrl = process.env.MQTT_CNNSTRING || 'mqtt://alarm:alarm@localhost'
const rootTopic = process.env.ROOT_TOPIC || `irc/${botName}`
const botOwner = process.env.OWNER || 'sshowfosho'
logger.level = process.env.LOG_LEVEL || 'info'

const irc = new IRC.Client(ircserver, botName, {
  port: 6697,
  userName: botName,
  realName: `${botName} is a nodebot`,
  // Wait for MQTT connection
  autoConnect: false,
  channels: [homechan],
  secure: true,
  floodProtection: true,
  floodProtectionDelay: 500
})

// Initiate MQTT connection
const mqtt = MQTT.connect(mqttServerUrl)

mqtt.on('connect', function (connack) {
  mqtt.subscribe(`${rootTopic}/#`)
  logger.debug('MQTT opened connection')
})

mqtt.on('close', function (connack) {
  logger.debug('MQTT closed connection')
})

mqtt.on('message', function (topic, message) {
  message = message.toString()
  logger.info('MQTT message received', {topic, message})

  // Execute commands from owner
  if (topic.startsWith(`${rootTopic}/message/${botOwner}/`)) {
    logger.verbose('MQTT event from bot owner', {message})
    if (message.startsWith('!')) {
      const args = message.replace(/^!/, '').split(' ')
      const command = args.shift()
      mqtt.publish(`${rootTopic}/command/${command}`, args.join(' '))
      return
    }
  }

  // Handle commands
  const command = topic.substr(topic.lastIndexOf('/') + 1)
  logger.silly('*** Parsed command', command)
  switch (command) {
    case 'mode':
      const args = message.split(' ').filter(m => m.length)
      if (args.every(arg => arg.match(/^[+-_a-zA-Z]+$/g))) {
        irc.send('MODE', homechan, ...args)
      }
      break
    case 'say':
      irc.say(homechan, message)
      break
    default:
      logger.debug('Message unhandled')
      break
  }
})

irc.connect()

irc.on('registered', (message) => {
  logger.info('IRC connected', {event: 'registered', message})
})

irc.on('error', (err) => {
  mqtt.publish(`${rootTopic}/error`, err.toString())
  logger.error('IRC error occured', err)
})

irc.on('message', (from, to, message) => {
  // Remove # from topic string to comply with MQTT topic rules
  const topic = `${rootTopic}/message/${from}/${to}`.replace('#', '=')
  mqtt.publish(topic, message)
  logger.debug('IRC message received', {from, to, message})
})

irc.on('unhandled', (message) => {
  logger.debug('IRC unhandled event', {message})
})

irc.on('netError', (exception) => {
  logger.debug('IRC net error', {exception})
})

irc.conn.on('close', (hadError) => {
  if (hadError) {
    logger.error('IRC connection closed due to a socket transmission error', {hadError})
  } else {
    logger.info('IRC connection closed', {hadError})
  }
})

// Allow client to disconnect before terminating the client process
let exitAttempts = 0
function cleanExit () {
  if (exitAttempts === 0) {
    irc.disconnect('wow... actually exiting cleanly', () => {
      logger.info('IRC disconnected (signaled)')
      mqtt.end(() => {
        logger.info('MQTT disconnected (signaled)')
        process.exit(0)
      })
    })
    exitAttempts++
  } else {
    logger.warn('Forcefully exiting')
    process.exit(1)
  }
}

process.on('SIGKIL', () => {
  logger.debug('SIGKIL trapped')
  cleanExit()
})
process.on('SIGINT', () => {
  logger.debug('SIGINT trapped')
  cleanExit()
})
process.on('SIGHUP', () => {
  logger.debug('SIGHUP trapped')
  cleanExit()
})
process.on('SIGTERM', () => {
  logger.debug('SIGTERM trapped')
  cleanExit()
})
